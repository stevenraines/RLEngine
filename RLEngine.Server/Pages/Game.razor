@page "/game"

<PageTitle>Main Game</PageTitle>
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage

@using RLEngine.Server
@using RLEngine.Core
@inject RLEngine.Server.GameServer GameServer
@inject ProtectedLocalStorage protectedLocalStorage

<div style="border: 1px solid #000;" @ref="keyRef" tabindex="0" @onkeydown="HandleKeyDown">
@GameServer.GameTick
@pressedKey - @playerId - @player?.X : @player?.Y
<pre>@playerBoardView</pre>
</div>

@code {

    private ElementReference keyRef;
    private string pressedKey = "";
    System.Threading.Timer? timer = null;
    long lastTick;
    string playerBoardView = "";
    string oldPlayerBoardView = "";
    Guid? playerId = null;
    IGameObject? player;

    private void HandleKeyDown(KeyboardEventArgs e)
    {
        pressedKey = e.Key;
        if(player != null){
            GameServer.IssuePlayerCommand(player,pressedKey);
        }

    }

    protected override void OnInitialized()
    {

        timer = new System.Threading.Timer(async _ =>  // async void
        {

            if(GameServer.GameTick <= lastTick) return;

            oldPlayerBoardView = playerBoardView;

            if(player != null){
                playerBoardView =  GameServer.RenderStringView(player.X,player.Y,player.Z);

            if(oldPlayerBoardView != playerBoardView)
                // we need StateHasChanged() because this is an async void handler
                // we need to Invoke it because we could be on the wrong Thread
                await InvokeAsync(StateHasChanged);
            }

        }, null, 0, (int) GameServer.GameTimer.Interval / 2);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {

            await SetPlayer();
        }
        await keyRef.FocusAsync();
        lastTick = GameServer.GameTick;

    }

    protected async Task<Guid> SetPlayer(){

        // see if a player is already registered.
        if(playerId != null && playerId != Guid.Empty) {
            return (Guid) playerId;
        }

        playerId = (await protectedLocalStorage.GetAsync<Guid>("PlayerId")).Value;


        // see if a player is already registered.
        player = await GameServer.RegisterPlayer((Guid) playerId);
        await protectedLocalStorage.SetAsync("PlayerId",player.Id);
        playerId = player.Id;

        return (Guid) player.Id;

    }


}
