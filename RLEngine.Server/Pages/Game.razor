@page "/game"

<PageTitle>Main Game</PageTitle>
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using RLEngine.Server.Components
@using RLEngine.Server
@using RLEngine.Core
@inject RLEngine.Server.GameServer GameServer
@inject ProtectedLocalStorage protectedLocalStorage

<div class="terminalContainer" @ref="keyRef" tabindex="0" @onkeydown="HandleKeyDown">
    <div class="terminalCell" style="grid-column: span 3;">Header</div>
    <div class="terminalCell">Area A</div>
    <GameTerminal Player="@player" PlayerBoardView="@playerBoardView"></GameTerminal>
    <div style="grid-row: span 2;" class="terminalCell">Info Panel</div>
    <div class="terminalCell">Area B</div>
    <StatusTerminal Player="@player" LastAction="@pressedKey"></StatusTerminal>
    <div style="grid-column: span 3;"></div>
</div>

@code {

    private System.Threading.Timer? timer = null;
    private long lastTick;
    private string playerBoardView = "";
    private ElementReference keyRef;
    private string pressedKey = "";


    Guid? playerId = null;
    private IGameObject? player;

    protected override void OnInitialized()
    {

        timer = new System.Threading.Timer(async _ =>  // async void
        {

            if(GameServer.GameTick <= lastTick) return;

            if(player != null){
                playerBoardView =  GameServer.RenderStringView(player.X,player.Y,player.Z);

                // we need StateHasChanged() because this is an async void handler
                // we need to Invoke it because we could be on the wrong Thread
                await InvokeAsync(StateHasChanged);
            }

        }, null, 0, (int) GameServer.GameTimer.Interval / 2);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {

            await SetPlayer();
        }
        await keyRef.FocusAsync();
        lastTick = GameServer.GameTick;

    }

    protected async Task<Guid> SetPlayer(){

        // see if a player is already registered.
        if(playerId != null && playerId != Guid.Empty) {
            return (Guid) playerId;
        }

        playerId = (await protectedLocalStorage.GetAsync<Guid>("PlayerId")).Value;


        // see if a player is already registered.
        player = await GameServer.RegisterPlayer((Guid) playerId);
        await protectedLocalStorage.SetAsync("PlayerId",player.Id);
        playerId = player.Id;

        return (Guid) player.Id;

    }




    private void HandleKeyDown(KeyboardEventArgs e)
    {
        pressedKey = e.Key;
        if(player != null){
            GameServer.IssuePlayerCommand(player,pressedKey);
        }

    }


}
